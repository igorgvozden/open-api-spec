openapi: 3.0.1
info:
  title: Flights
  version: 1.0.0
  description: |-
    This is a sample Fligts Info Server base on the OpenApi 3.0.1 specification
  termsOfService: http://swagger.io/terms/
  contact:
    email: igorgvozden@yahoo.com
externalDocs:
  description: |-
    Find out more about Mock flight data delivered simply and quickly without a database project.
    This project's Flight Engine is used as an example for data model.
  url: https://github.com/AmericanAirlines
servers:
  - url: https://flights/api/v1
    description: Development server
tags:
  - name: Airport Information
    description: |-
      Each endpoint displays information related to the airport whose IATA (Airport Code) is provided with the request
    externalDocs:
      description: Find out more
      url: http://github.com/AmericanAirlines/Flight-Engine/blob/main/README.md#airport-information
  - name: Flight Information
    description: Get flight information for the given date
    externalDocs:
      description: Find out more
      url: http://github.com/AmericanAirlines/Flight-Engine/blob/main/README.md#flight-information
  - name: User
    description: Operations about user
  - name: Booking
    description: Operations for booking and deleting user's flights
  - name: Tickets
    description: Ticket purchases
    
paths:
  /airports:
    get:
      tags:
        - Airport Information
      summary: Get details of all supported airports
      description: Get the details of all supported airports
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Airport'
                  
  /airports/{code}:
    get:
      tags:
        - Airport Information
      summary: Get details of a given IATA code airport
      description: Get the details of a given airport by its IATA (Airport Code)
      parameters:
        - in: path
          name: code
          description: Provide IATA code for wanted airport in the URL path
          example: /airports/PHL
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Airport'          
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: string
                example: Please enter a valid airport code i.e. DFW, GSO, ATL...
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: string
                example: Airport not found
  
  /flights:
    get:
      tags: 
        - Flight Information
      summary: Get flights on a specific date
      description: Get information about flights on a specific date
      operationId: get flights
      parameters:
        - in: query
          name: date
          required: true
          description: |-
            Provide query parameter in format: YYYY-MM-DD
          example: /flights?date=2023-03-01
          schema:
            type: string
            description: Search flights on a specific date
        - in: query
          name: destination
          required: true
          description: |-
            Provide parameter for date in format YYYY-MM-DD and
            Provide destination parameter in format: DFW (IATA-CODE)
          example: /flights?date=2023-03-1&destination=DFW
          schema:
            type: string
            description: Search flights on a specific date and destionation
        - in: query
          name: origin
          required: true
          description: |-
            Provide parameter for date in format YYYY-MM-DD and
            Provide origin parameter in format: PHL (IATA-CODE)
          example: /flights?date=2023-03-1&origin=PHL
          schema:
            type: string
            description: Search flights on a specific date and origin
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: string
                example: |-
                  'date' is a required parameter and must use the following format: YYYY-MM-DD
    
  /booking:
    get:
      tags:
        - Booking
      description: Check booked flights
      summary: Get all flights saved to wishlist
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flight'
    post:
      tags:
        - Booking
      description: Book a flight
      summary: Save flight for a future purchase
      operationId: bookFlight
      requestBody:
        description: booked flight object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flight'
      responses:
        '200':
          description: success
          content:
            application/json:
              example: Flight booked
        '400':
          description: Bad Request
          content:
            application/json:
              example: Missing properties
  
  /booking/{id}:
    get:
      tags:
        - Booking
      description: Get flight with ID
      operationId: getFlight
      parameters:
        - in: path
          name: id
          description: If of a previously booked flight
          required: true
          example: /booking/3
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              example: Flight aquired
        '400':
          description: Bad Request
          content:
            application/json:
              example: Invalid ID format
        '404':
          description: Bad Request
          content:
            application/json:
              example: No such ID
        
    delete:
      tags:
        - Booking
      description: Delete a flight
      summary: Remove flight from wishlist
      operationId: deleteFlight
      parameters:
        - in: path
          name: id
          description: Id of a previously booked flight
          required: true
          example: /booking/2
          schema:
            type: integer
      responses:
        '204':
          description: No Content
          content:
            application/json:
              example: Flight deleted
        '400':
          description: Bad Request
          content:
            application/json:
              example: Missing Flight Id
              
  /user:
    post:
      tags:
        - User
      summary: Create user
      description: Sava data about the traveler.
      operationId: createUser
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
                
  /user/{username}:
    get:
      tags:
        - User
      summary: Get user's info
      description: ''
      operationId: getUsersInfo
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
          example: /user/john
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          description: Invalid username supplied
          content:
            application/json:
              example: Invalid username supplied
        '404':
          description: User not found
          content:
            application/json:
              example: User not found
    put:
      tags:
        - User
      summary: Update user
      description: Update user's info.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be edited
          required: true
          schema:
            type: string
          example: /user/john
      requestBody:
        description: Update an existent user in the local storage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: success
          content:
            application/json:
              example: User's info updated          
        '400':
          description: Invalid username supplied
          content:
            application/json:
              example: Invalid username supplied  
        '404':
          description: User not found
          content:
            application/json:
              example: User not found
          
    delete:
      tags:
        - User
      summary: Delete user
      description: Remove your data from local storage.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
          example: /user/john
      responses:
        '204':
          description: No Content
          content:
            application/json:
              example: User deleted
        '400':
          description: Invalid username supplied
          content:
            application/json:
              example: Invalid username supplied
        '404':
          description: User not found
          content:
            application/json:
              example: User not found
              
  /tickets:
    get:
      tags:
        - Tickets
      summary: Get purchased tickets
      description: 'List all purchased tickets'
      operationId: getAllTickets
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Ticket'
    post:
      tags:
        - Tickets
      summary: Buy ticket
      description: Buy ticket and bookmark flight it with additional property <price>
      operationId: buyTicket
      requestBody:
        description: Create ticket object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                example: 'Missing properties'
                
  /tickets/{id}:
    get:
      tags:
        - Tickets
      summary: Get purchased tickets
      description: 'List all purchased tickets'
      operationId: getTicketWithId
      parameters:
        - name: id
          in: path
          description: 'Returns purchased ticket with ID.'
          required: true
          schema:
            type: string
          example: /tickets/9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'          
        '400':
          description: 'Invalid id supplied'
          content:
            application/json:
              example: Invalid id supplied
        '404':
          description: Ticket id not found
          content:
            application/json:
              example: Ticket id not found
    
    delete:
      tags:
        - Tickets
      summary: Refund ticket and remove it from the storage
      description: Provide ticket id in order to refund it
      operationId: refundTicket
      parameters:
        - name: id
          in: path
          description: 'Refunds selectd ticket.'
          required: true
          schema:
            type: string
          example: /tickets/9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
      responses:
        '204':
          description: No Content
          content:
            application/json:
              example: User deleted
        '400':
          description: Bad Request
          content:
            application/json:
              example: 'Invalid id format'
        '404':
          description: Bad Request
          content:
            application/json:
              example: 'Ticket not found'      
      
components:
  schemas:
    Airport:
      type: object
      properties:
        code:
          type: string
          description: |-
            Three(3) letters code used in aviation and also in logistics to identify an airport.
            Also commonly known as IATA code.
          example: 'DFW'
        city:
          type: string
          description: City where the airport is located.
          example: Dallas-Fort Worth
        timezone:
          type: string
          example: America/Chicago
        location:
          type: object
          properties:
            latitude:
              type: number
              format: float
              example: 32.8998
            longitude:
              type: number
              format: float
              example: 97.0403
    Flight:
      type: object
      properties:
        flightNumber:
          type: integer
          format: int64
          example: 0978
        origin:
          type: object
          properties:
            code:
              type: string
              example: 'DFW'
            city:
              type: string
              description: City where the airport is located.
              example: Dallas-Fort Worth
            timezone:
              type: string
              example: America/Chicago
            location:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                  example: 32.8998
                longitude:
                  type: number
                  format: float
                  example: 97.0403
        destination:
          type: object
          properties:
            code:
              type: string
              example: 'DFW'
            city:
              type: string
              description: City where the airport is located.
              example: Dallas-Fort Worth
            timezone:
              type: string
              example: America/Chicago
            location:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                  example: 32.8998
                longitude:
                  type: number
                  format: float
                  example: 97.0403
        distance:
          type: integer
          format: int64
          example: 7393
        duration:
          type: object
          properties:
            locale:
              type: string
              example: 18h 36m
            hours:
              type: integer
              format: int32
              example: 18
            minutes:
              type: integer
              format: int32
              example: 36
        departureTime:
          type: string
          format: date-time
          example: '2017-08-29T02:36:00.000-05:00'
        arrivalTime:
          type: string
          format: date-time
          example: '2017-08-29T22:12:00.000-04:00'
        aircraft:
          type: object
          properties:
            model:
              type: integer
              format: int32
              example: 321
            passengerCapacity:
              type: object
              properties:
                total:
                  type: integer
                  format: int32
                  example: 181
                main:
                  type: integer
                  format: int32
                  example: 165
                first:
                  type: integer
                  format: int32
                  example: 16
            speed:
              type: integer
              format: int32
              example: 400
    Ticket:
      type: object
      properties:
        id:
          type: string
          example: '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'
        flightNumber:
          type: integer
          format: int64
          example: 0978
        price:
          type: number
          format: float
          example: 123.45
        currency:
          type: string
          example: usd
          enum:
            - usd
            - eur
        travelDate:
          type: string
          format: date-time
        status:
          type: string
          description: Ticket Status
          example: paid
          enum:
            - placed
            - reserved
            - paid
        complete:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 34
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
